import os
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

logging.basicConfig(level=logging.INFO)

TOKEN = os.environ["TOKEN"]
PAYMENT_PROVIDER_TOKEN = os.environ.get("PAYMENT_PROVIDER_TOKEN", "")
ADMIN_CHAT_ID = int(os.environ.get("ADMIN_ID", "0"))
CHANNEL_URL = os.environ.get("URL", "https://t.me/")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# ===== –ü–ê–ú–Ø–¢–¨ =====
user_data = {}
user_data_completed = set()

questions = [
    {"key": "name", "question": "üìù –ò–º—è:"},
    {"key": "age", "question": "üéÇ –í–æ–∑—Ä–∞—Å—Ç:"},
    {"key": "skill", "question": "üé® –°–∫–∏–ª–ª –≤ —Ä–∏—Å–æ–≤–∞–Ω–∏–∏ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):", "button": "–ù–µ —Ö–æ—á—É —É–∫–∞–∑—ã–≤–∞—Ç—å"},
]

# ===== –£–¢–ò–õ–ò–¢–´ =====
def validate_input(key, text):
    if key == "name" and len(text) > 30: return False
    if key == "skill" and len(text) > 70: return False
    if key == "age" and not text.isdigit(): return False
    return True

# ===== –ê–ù–ö–ï–¢–ê =====
async def ask_question(chat_id):
    step = user_data[chat_id]["step"]
    q = questions[step]
    text = f"–í–æ–ø—Ä–æ—Å {step+1}/{len(questions)}\n{q['question']}"
    if q.get("button"):
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(q["button"])]], resize_keyboard=True, one_time_keyboard=True
        )
        await bot.send_message(chat_id, text, reply_markup=keyboard)
    else:
        await bot.send_message(chat_id, text, reply_markup=None)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    chat_id = message.chat.id
    if chat_id in user_data_completed:
        await message.answer("‚ö† –í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É.")
        return
    user_data[chat_id] = {"step": 0, "answers": {}}
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É.")
    await ask_question(chat_id)

@dp.message(F.text)
async def handle_answers(message: types.Message):
    chat_id = message.chat.id
    if chat_id not in user_data: return

    step = user_data[chat_id]["step"]
    q = questions[step]
    text = message.text

    if q.get("button") and text == q["button"]:
        user_data[chat_id]["answers"][q["key"]] = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    elif validate_input(q["key"], text):
        user_data[chat_id]["answers"][q["key"]] = text
    else:
        await message.answer("‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    if step+1 < len(questions):
        user_data[chat_id]["step"] += 1
        await ask_question(chat_id)
    else:
        ans = user_data[chat_id]["answers"]
        summary = f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã!\n\n–ò–º—è: {ans['name']}\n–í–æ–∑—Ä–∞—Å—Ç: {ans['age']}\n–°–∫–∏–ª–ª: {ans['skill']}"
        await message.answer(summary)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=CHANNEL_URL)]
        ])
        await message.answer("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=keyboard)

        # –ê–¥–º–∏–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if ADMIN_CHAT_ID:
            await bot.send_message(
                ADMIN_CHAT_ID,
                f"üì© –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞!\nüë§ {message.from_user.full_name}\nüÜî {chat_id}\n–ò–º—è: {ans['name']}\n–í–æ–∑—Ä–∞—Å—Ç: {ans['age']}\n–°–∫–∏–ª–ª: {ans['skill']}"
            )

        user_data_completed.add(chat_id)
        del user_data[chat_id]

# ===== –î–û–ù–ê–¢–´ =====
@dp.message(Command("donate"))
async def donate(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚ú® –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π", callback_data="donate_charity"),
         InlineKeyboardButton("üíé –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏", callback_data="donate_privileges")]
    ])
    await message.answer("üåü –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–Ω–∞—Ç–∞:", reply_markup=keyboard)

@dp.callback_query()
async def donate_cb(query: types.CallbackQuery):
    data = query.data
    if data == "donate_charity":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton("10 ‚≠ê", callback_data="charity_10"),
             InlineKeyboardButton("50 ‚≠ê", callback_data="charity_50")],
            [InlineKeyboardButton("100 ‚≠ê", callback_data="charity_100")],
        ])
        await query.message.edit_text("‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É:", reply_markup=keyboard)
    elif data.startswith("charity_"):
        amount = int(data.split("_")[1])
        await bot.send_message(query.from_user.id, f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ {amount} ‚≠ê (–æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ)")
    await query.answer()

# ===== RUN =====
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
