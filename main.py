import os
import logging
import time
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    Update,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from background import keep_alive  # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å Replit keep-alive

# ========= –ù–ê–°–¢–†–û–ô–ö–ò =========
API_TOKEN = os.environ["Token"]          # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è)
CHANNEL_URL = os.environ.get("URL", "")  # —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
ADMIN_CHAT_ID = int(os.environ.get("ADMIN_ID", "0"))  # ID –∞–¥–º–∏–Ω–∞ –¥–ª—è –ª–æ–≥–æ–≤
ADMIN_CHAT_ID_2 = int(os.environ.get("ADMIN_ID_2", "0"))  # ID –∞–¥–º–∏–Ω–∞ –¥–ª—è –ª–æ–≥–æ–≤

logging.basicConfig(level=logging.INFO)
print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

# ========= –ü–ê–ú–Ø–¢–¨/–•–†–ê–ù–ò–õ–ò–©–ï =========
user_data: dict[int, dict] = {}           # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã {chat_id: {"step": int, "answers": dict}}
user_data_completed: set[int] = set()     # –∫—Ç–æ —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É
user_blocked: dict[int, dict] = {}        # {chat_id: {"attempts": int, "last_time": int}}

BLOCK_DURATION = 24 * 60 * 60  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
MAX_ATTEMPTS = 6               # –ø–æ—Å–ª–µ 6-–π –ø–æ–ø—ã—Ç–∫–∏ ‚Äî –±–ª–æ–∫ –Ω–∞ 24—á

# ========= –í–û–ü–†–û–°–´ =========
questions = [
    {"key": "name",  "question": "üìù –ò–º—è:"},
    {"key": "age",   "question": "üéÇ –í–æ–∑—Ä–∞—Å—Ç:"},
    {"key": "skill", "question": "üé® –°–∫–∏–ª–ª –≤ —Ä–∏—Å–æ–≤–∞–Ω–∏–∏ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):", "button": "–ù–µ —Ö–æ—á—É —É–∫–∞–∑—ã–≤–∞—Ç—å"},
]

# ========= –£–¢–ò–õ–ò–¢–´ =========
def validate_input(key: str, text: str) -> bool:
    if key == "name" and len(text) > 30:
        return False
    if key == "skill" and len(text) > 70:
        return False
    if key == "age" and not text.isdigit():
        return False
    return True

def is_block_active(chat_id: int, now: int) -> bool:
    b = user_blocked.get(chat_id)
    if not b:
        return False
    if b.get("last_time", 0) == 0:
        return False
    return (now - b["last_time"]) < BLOCK_DURATION

def reset_block_if_expired(chat_id: int, now: int) -> None:
    b = user_blocked.get(chat_id)
    if not b:
        return
    if b.get("last_time", 0) and (now - b["last_time"]) >= BLOCK_DURATION:
        user_blocked[chat_id] = {"attempts": 0, "last_time": 0}

def note_attempt_and_maybe_block(chat_id: int, now: int) -> tuple[int, bool]:
    b = user_blocked.get(chat_id)
    if not b:
        b = {"attempts": 0, "last_time": 0}
        user_blocked[chat_id] = b

    b["attempts"] += 1
    blocked_now = False
    if b["attempts"] >= MAX_ATTEMPTS:
        b["last_time"] = now
        blocked_now = True
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 1 –¥–µ–Ω—å –∑–∞ —Å–ø–∞–º.")
    return b["attempts"], blocked_now

async def ask_question(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    step = user_data[chat_id]["step"]
    current_question = questions[step]
    progress_text = f"–í–æ–ø—Ä–æ—Å {step + 1}/{len(questions)}\n"

    if current_question.get("button") and current_question["key"] == "skill":
        keyboard = ReplyKeyboardMarkup(
            [[current_question["button"]]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await context.bot.send_message(chat_id, progress_text + current_question["question"], reply_markup=keyboard)
    else:
        await context.bot.send_message(chat_id, progress_text + current_question["question"])


# ========= –•–≠–ù–î–õ–ï–†–´ =========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_chat:
        return
    chat_id = update.effective_chat.id
    now = int(time.time())

    if is_block_active(chat_id, now):
        return
    reset_block_if_expired(chat_id, now)

    if chat_id in user_data_completed:
        attempts, blocked_now = note_attempt_and_maybe_block(chat_id, now)
        if not blocked_now:
            left = max(0, MAX_ATTEMPTS - attempts)
            msg = "‚ö† –í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É. –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞."
            if left > 0:
                msg += f"\n(–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {attempts}/{MAX_ATTEMPTS}. –ü–æ—Å–ª–µ {MAX_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫ –±—É–¥–µ—Ç –∏–≥–Ω–æ—Ä –Ω–∞ 24 —á–∞—Å–∞.)"
            await context.bot.send_message(chat_id, msg)
        return

    user_data[chat_id] = {"step": 0, "answers": {}}
    await context.bot.send_message(chat_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É.")
    await ask_question(chat_id, context)

# ========= –°–ï–ö–†–ï–¢–ù–ê–Ø –ö–û–ú–ê–ù–î–ê =========
async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É
    if chat_id != ADMIN_CHAT_ID_2:
        return  # –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö

    await context.bot.send_message(chat_id, "üèì Pong! –ë–æ—Ç –æ–Ω–ª–∞–π–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_chat or not update.message:
        return
    chat_id = update.effective_chat.id
    text = update.message.text or ""

    if chat_id not in user_data:
        return

    step = user_data[chat_id]["step"]
    current_question = questions[step]

    if current_question.get("button") and text == current_question["button"]:
        user_data[chat_id]["answers"][current_question["key"]] = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        await context.bot.send_message(chat_id, "–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å", reply_markup=ReplyKeyboardRemove())
    else:
        if not validate_input(current_question["key"], text):
            await context.bot.send_message(chat_id, "‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        user_data[chat_id]["answers"][current_question["key"]] = text

    if step + 1 < len(questions):
        user_data[chat_id]["step"] += 1
        await ask_question(chat_id, context)
    else:
        answers = user_data[chat_id]["answers"]
        summary = (
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã!\n\n"
            f"–ò–º—è: {answers['name']}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {answers['age']}\n"
            f"–°–∫–∏–ª–ª –≤ —Ä–∏—Å–æ–≤–∞–Ω–∏–∏: {answers['skill']}"
        )
        await context.bot.send_message(chat_id, summary)

        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=CHANNEL_URL or "https://t.me/")]]
        )
        await context.bot.send_message(chat_id, "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=keyboard)

        # ===== –û–¢–ü–†–ê–í–ö–ê –ê–î–ú–ò–ù–£ =====
        if ADMIN_CHAT_ID != 0:
            user = update.effective_user
            profile_link = f"<a href='tg://user?id={chat_id}'>–ü—Ä–æ—Ñ–∏–ª—å</a>"
            log_text = (
                f"üì© –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞!\n\n"
                f"üë§ {profile_link}\n"
                f"üÜî ChatID: <code>{chat_id}</code>\n\n"
                f"–ò–º—è: {answers['name']}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {answers['age']}\n"
                f"–°–∫–∏–ª–ª: {answers['skill']}"
            )
            try:
                await context.bot.send_message(ADMIN_CHAT_ID, log_text, parse_mode="HTML")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É: {e}")

        user_data_completed.add(chat_id)
        del user_data[chat_id]
        
keep_alive()

# ========= –ó–ê–ü–£–°–ö =========
if __name__ == "__main__":
    keep_alive()  # –∑–∞–ø—É—Å–∫–∞–µ–º Flask –¥–ª—è "–ø–∏–Ω–≥–∞" (–Ω–∞ Replit/Render)
    app = ApplicationBuilder().token(API_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.run_polling()
