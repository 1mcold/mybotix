import os
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils import executor

logging.basicConfig(level=logging.INFO)

TOKEN = os.environ["Token"]
PAYMENT_PROVIDER_TOKEN = ""  # –≤—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
ADMIN_CHAT_ID = int(os.environ.get("ADMIN_ID", "0"))
CHANNEL_URL = os.environ.get("URL", "")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# ========= –ü–ê–ú–Ø–¢–¨/–•–†–ê–ù–ò–õ–ò–©–ï =========
user_data: dict[int, dict] = {}
user_data_completed: set[int] = set()

BLOCK_DURATION = 24 * 60 * 60
MAX_ATTEMPTS = 6
user_blocked: dict[int, dict] = {}

questions = [
    {"key": "name", "question": "üìù –ò–º—è:"},
    {"key": "age", "question": "üéÇ –í–æ–∑—Ä–∞—Å—Ç:"},
    {"key": "skill", "question": "üé® –°–∫–∏–ª–ª –≤ —Ä–∏—Å–æ–≤–∞–Ω–∏–∏ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):", "button": "–ù–µ —Ö–æ—á—É —É–∫–∞–∑—ã–≤–∞—Ç—å"},
]

# ========= –£–¢–ò–õ–ò–¢–´ =========
def validate_input(key: str, text: str) -> bool:
    if key == "name" and len(text) > 30: return False
    if key == "skill" and len(text) > 70: return False
    if key == "age" and not text.isdigit(): return False
    return True

def is_block_active(chat_id: int, now: int) -> bool:
    b = user_blocked.get(chat_id)
    return b and b.get("last_time", 0) and (now - b["last_time"]) < BLOCK_DURATION

def reset_block_if_expired(chat_id: int, now: int):
    b = user_blocked.get(chat_id)
    if b and b.get("last_time", 0) and (now - b["last_time"]) >= BLOCK_DURATION:
        user_blocked[chat_id] = {"attempts": 0, "last_time": 0}

def note_attempt_and_maybe_block(chat_id: int, now: int) -> tuple[int, bool]:
    b = user_blocked.setdefault(chat_id, {"attempts": 0, "last_time": 0})
    b["attempts"] += 1
    blocked_now = False
    if b["attempts"] >= MAX_ATTEMPTS:
        b["last_time"] = now
        blocked_now = True
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 1 –¥–µ–Ω—å –∑–∞ —Å–ø–∞–º.")
    return b["attempts"], blocked_now

async def ask_question(chat_id: int):
    step = user_data[chat_id]["step"]
    q = questions[step]
    progress_text = f"–í–æ–ø—Ä–æ—Å {step+1}/{len(questions)}\n{q['question']}"
    if q.get("button"):
        keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(q["button"])]], resize_keyboard=True, one_time_keyboard=True)
        await bot.send_message(chat_id, progress_text, reply_markup=keyboard)
    else:
        await bot.send_message(chat_id, progress_text, reply_markup=ReplyKeyboardRemove())

# ========= –ê–ù–ö–ï–¢–ê =========
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    chat_id = message.chat.id
    now = int(time.time())
    if is_block_active(chat_id, now):
        return
    reset_block_if_expired(chat_id, now)

    if chat_id in user_data_completed:
        attempts, blocked_now = note_attempt_and_maybe_block(chat_id, now)
        if not blocked_now:
            left = max(0, MAX_ATTEMPTS - attempts)
            msg = "‚ö† –í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É. –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞."
            if left > 0:
                msg += f"\n(–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {attempts}/{MAX_ATTEMPTS}. –ü–æ—Å–ª–µ {MAX_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫ –±—É–¥–µ—Ç –∏–≥–Ω–æ—Ä –Ω–∞ 24 —á–∞—Å–∞.)"
            await bot.send_message(chat_id, msg)
        return

    user_data[chat_id] = {"step": 0, "answers": {}}
    await bot.send_message(chat_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É.")
    await ask_question(chat_id)

@dp.message(F.text)
async def handle_answers(message: types.Message):
    chat_id = message.chat.id
    text = message.text
    if chat_id not in user_data: return

    step = user_data[chat_id]["step"]
    q = questions[step]

    if q.get("button") and text == q["button"]:
        user_data[chat_id]["answers"][q["key"]] = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        await bot.send_message(chat_id, "–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å", reply_markup=ReplyKeyboardRemove())
    elif validate_input(q["key"], text):
        user_data[chat_id]["answers"][q["key"]] = text
    else:
        await bot.send_message(chat_id, "‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    if step+1 < len(questions):
        user_data[chat_id]["step"] += 1
        await ask_question(chat_id)
    else:
        ans = user_data[chat_id]["answers"]
        summary = f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã!\n\n–ò–º—è: {ans['name']}\n–í–æ–∑—Ä–∞—Å—Ç: {ans['age']}\n–°–∫–∏–ª–ª: {ans['skill']}"
        await bot.send_message(chat_id, summary)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=CHANNEL_URL)]])
        await bot.send_message(chat_id, "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=keyboard)

        if ADMIN_CHAT_ID != 0:
            profile_link = f"<a href='tg://user?id={chat_id}'>–ü—Ä–æ—Ñ–∏–ª—å</a>"
            log_text = f"üì© –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞!\nüë§ {profile_link}\nüÜî {chat_id}\n–ò–º—è: {ans['name']}\n–í–æ–∑—Ä–∞—Å—Ç: {ans['age']}\n–°–∫–∏–ª–ª: {ans['skill']}"
            await bot.send_message(ADMIN_CHAT_ID, log_text, parse_mode="HTML")

        user_data_completed.add(chat_id)
        del user_data[chat_id]

@dp.message(Command("ping"))
async def cmd_ping(message: types.Message):
    chat_id = message.chat.id
    if False:  # ADMIN_CHAT_ID_2 –≤—Å–µ–≥–¥–∞ –ø—É—Å—Ç–æ–π
        await bot.send_message(chat_id, "üèì Pong! –ë–æ—Ç –æ–Ω–ª–∞–π–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.")

# ========= –î–û–ù–ê–¢–´ =========
@dp.message(Command("donate"))
async def donate(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚ú® –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π", callback_data="donate_charity"),
         InlineKeyboardButton("üíé –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏", callback_data="donate_privileges")]
    ])
    await message.answer("üåü –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–Ω–∞—Ç–∞:", reply_markup=keyboard)

@dp.callback_query()
async def donate_cb(query: types.CallbackQuery):
    data = query.data
    if data == "donate_charity":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton("10 ‚≠ê", callback_data="charity_amount_10"),
             InlineKeyboardButton("50 ‚≠ê", callback_data="charity_amount_50")],
            [InlineKeyboardButton("100 ‚≠ê", callback_data="charity_amount_100"),
             InlineKeyboardButton("500 ‚≠ê", callback_data="charity_amount_500")],
            [InlineKeyboardButton("1000 ‚≠ê", callback_data="charity_amount_1000")],
            [InlineKeyboardButton("üí∞ –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="charity_custom")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        await query.message.edit_text("‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É:", reply_markup=keyboard)

    elif data.startswith("charity_amount_"):
        amount = int(data.split("_")[-1])
        await query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {amount} ‚≠ê (–æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)")
    elif data == "donate_privileges":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton("üõ° –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –æ—Ç –º—É—Ç–∞ ‚Äî 10 ‚≠ê", callback_data="privilege_mute_protect")],
            [InlineKeyboardButton("üîì –†–∞–∑–º—É—Ç ‚Äî 15 ‚≠ê", callback_data="privilege_unmute")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        await query.message.edit_text("üíé –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏", reply_markup=keyboard)
    await query.answer()

# ========= RUN =========
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
