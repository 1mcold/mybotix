import os
import logging
import time
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    LabeledPrice
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    PreCheckoutQueryHandler,
    ContextTypes,
    filters,
)
from background import keep_alive  # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å Replit keep-alive

# ========= –ù–ê–°–¢–†–û–ô–ö–ò =========
API_TOKEN = os.environ["Token"]                # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
PAYMENT_PROVIDER_TOKEN = "" # —Ç–æ–∫–µ–Ω –¥–ª—è Telegram Stars
CHANNEL_URL = os.environ.get("URL", "")
ADMIN_CHAT_ID = int(os.environ.get("ADMIN_ID", "0"))
ADMIN_CHAT_ID_2 = int(os.environ.get("ADMIN_ID_2", "0"))

logging.basicConfig(level=logging.INFO)
print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

# ========= –ü–ê–ú–Ø–¢–¨ =========
user_data: dict[int, dict] = {}
user_data_completed: set[int] = set()
transactions: dict[str, dict] = {}  # {transaction_id: {"chat_id": int, "amount": int, "title": str}}

# ========= –ö–û–ú–ê–ù–î–ê /donate =========
async def donate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("‚ú® –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π", callback_data="donate_charity"),
            InlineKeyboardButton("üíé –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏", callback_data="donate_privileges")
        ]
    ]
    await update.message.reply_text(
        "üåü <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–Ω–∞—Ç–∞</b>",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# ========= –ö–ù–û–ü–ö–ò =========
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "donate_charity":
        keyboard = [
            [InlineKeyboardButton("10 ‚≠ê", callback_data="charity_amount_10"),
             InlineKeyboardButton("50 ‚≠ê", callback_data="charity_amount_50")],
            [InlineKeyboardButton("100 ‚≠ê", callback_data="charity_amount_100"),
             InlineKeyboardButton("500 ‚≠ê", callback_data="charity_amount_500")],
            [InlineKeyboardButton("1000 ‚≠ê", callback_data="charity_amount_1000")],
            [InlineKeyboardButton("üí∞ –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="charity_custom")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        await query.edit_message_text("‚ú® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞</b>", parse_mode="HTML",
                                      reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data.startswith("charity_amount_"):
        amount = int(query.data.split("_")[-1])
        await send_invoice(query, context, "–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ–Ω–∞—Ç", amount)

    elif query.data == "charity_custom":
        await query.edit_message_text("üí∞ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—É–º–º—É –≤ ‚≠ê:", parse_mode="HTML",
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="donate_charity")]]))
        context.user_data["waiting_for_custom"] = True

    elif query.data == "donate_privileges":
        keyboard = [
            [InlineKeyboardButton("üõ° –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –æ—Ç –º—É—Ç–∞ ‚Äî 10 ‚≠ê", callback_data="privilege_mute_protect")],
            [InlineKeyboardButton("üîì –†–∞–∑–º—É—Ç ‚Äî 15 ‚≠ê", callback_data="privilege_unmute")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        await query.edit_message_text("üíé <b>–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏</b>", parse_mode="HTML",
                                      reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "privilege_mute_protect":
        await send_invoice(query, context, "–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –æ—Ç –º—É—Ç–∞", 10)

    elif query.data == "privilege_unmute":
        await send_invoice(query, context, "–†–∞–∑–º—É—Ç", 15)

    elif query.data == "main_menu":
        await query.edit_message_text("üåü <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–Ω–∞—Ç–∞</b>", parse_mode="HTML",
                                      reply_markup=InlineKeyboardMarkup([
                                          [InlineKeyboardButton("‚ú® –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π", callback_data="donate_charity"),
                                           InlineKeyboardButton("üíé –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏", callback_data="donate_privileges")]
                                      ]))

# ========= –û–ë–†–ê–ë–û–¢–ö–ê –ö–ê–°–¢–û–ú–ù–û–ô –°–£–ú–ú–´ =========
async def handle_custom_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("waiting_for_custom"):
        try:
            amount = int(update.message.text)
            context.user_data["waiting_for_custom"] = False
            await send_invoice(update, context, "–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ–Ω–∞—Ç (–∫–∞—Å—Ç–æ–º)", amount)
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

# ========= –°–û–ó–î–ê–ù–ò–ï –ò–ù–í–û–ô–°–ê =========
async def send_invoice(target, context, title, amount):
    chat_id = target.from_user.id if hasattr(target, "from_user") else target.message.chat_id
    description = f"–û–ø–ª–∞—Ç–∞: {title}"
    payload = f"donation_{title}_{amount}_{int(time.time())}"

    prices = [LabeledPrice(label=title, amount=amount)]  # Stars —Ä–∞–±–æ—Ç–∞—é—Ç –≤ 1:1

    await context.bot.send_invoice(
        chat_id,
        title=title,
        description=description,
        payload=payload,
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency="XTR",
        prices=prices,
        start_parameter="donate"
    )

# ========= PreCheckout =========
async def precheckout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

# ========= –£–°–ü–ï–®–ù–ê–Ø –û–ü–õ–ê–¢–ê =========
async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payment = update.message.successful_payment
    chat_id = update.message.chat_id
    user = update.effective_user

    transaction_id = payment.provider_payment_charge_id or str(int(time.time()))
    amount = payment.total_amount
    title = payment.invoice_payload.split("_")[1]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    transactions[transaction_id] = {"chat_id": chat_id, "amount": amount, "title": title}

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n"
        f"üíé –û–ø–ª–∞—Ç–∞: {title}\n"
        f"‚≠ê –°—É–º–º–∞: {amount}\n"
        f"üÜî ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: <code>{transaction_id}</code>",
        parse_mode="HTML"
    )

    # –ê–¥–º–∏–Ω—É
    if ADMIN_CHAT_ID:
        profile_link = f"<a href='tg://user?id={chat_id}'>{user.first_name}</a>"
        await context.bot.send_message(
            ADMIN_CHAT_ID,
            f"üì¢ –ù–æ–≤—ã–π –¥–æ–Ω–∞—Ç!\n\n"
            f"üë§ {profile_link}\n"
            f"üÜî ChatID: <code>{chat_id}</code>\n"
            f"üíé –û–ø–ª–∞—Ç–∞: {title}\n"
            f"‚≠ê –°—É–º–º–∞: {amount}\n"
            f"üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: <code>{transaction_id}</code>",
            parse_mode="HTML"
        )

# ========= /refund =========
async def refund(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in [ADMIN_CHAT_ID, ADMIN_CHAT_ID_2]:
        return  # –∏–≥–Ω–æ—Ä

    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: /refund <id>")
        return

    transaction_id = context.args[0]
    tx = transactions.get(transaction_id)

    if not tx:
        await update.message.reply_text("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —á–µ—Ä–µ–∑ API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    await update.message.reply_text(
        f"üîÑ –í–æ–∑–≤—Ä–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!\n"
        f"üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: <code>{transaction_id}</code>\n"
        f"‚≠ê –°—É–º–º–∞: {tx['amount']}",
        parse_mode="HTML"
    )
keep_alive()
# ========= –ó–ê–ü–£–°–ö =========
def main():
    app = ApplicationBuilder().token(API_TOKEN).build()

    app.add_handler(CommandHandler("donate", donate))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_amount))
    app.add_handler(PreCheckoutQueryHandler(precheckout_handler))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))
    app.add_handler(CommandHandler("refund", refund))

    app.run_polling()

if __name__ == "__main__":
    keep_alive()
    main()

